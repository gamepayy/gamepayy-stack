generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model MerkleTrees {
  id            Int     @id @default(autoincrement())
  root          String? @db.VarChar(255)
  address       String? @db.VarChar(255)
  token_address String? @db.VarChar(255)
  amount        String? @db.VarChar(255)
  hash1         String? @db.VarChar(66)
  hash2         String? @db.VarChar(66)
  hash3         String? @db.VarChar(66)
  hash4         String? @db.VarChar(66)
  hash5         String? @db.VarChar(66)
  hash6         String? @db.VarChar(66)
  hash7         String? @db.VarChar(66)
  hash8         String? @db.VarChar(66)
  hash9         String? @db.VarChar(66)
  hash10        String? @db.VarChar(66)
  hash11        String? @db.VarChar(66)
  hash12        String? @db.VarChar(66)
}

model auth {
  address String  @id @db.VarChar(256)
  HASH    String? @db.VarChar(256)
}

model pending_withdrawals {
  id            Int      @id @default(autoincrement())
  address       String   @db.VarChar(256)
  token_address String   @db.VarChar(256)
  amount        String?  @db.VarChar(256)
  pending       Boolean?
}

model pending_withdrawals_test {
  id            Int      @id @default(autoincrement())
  address       String?  @db.VarChar(255)
  token_address String?  @db.VarChar(255)
  amount        String?  @db.VarChar(255)
  root          String?  @db.VarChar(255)
  txHash        String?  @db.VarChar(255)
  pending       Boolean?
}

model tokens {
  address  String  @id @db.VarChar(256)
  name     String? @db.VarChar(256)
  symbol   String? @db.VarChar(256)
  decimals Int?
}

model tokens_balances {
  address       String  @db.VarChar(255)
  token_address String  @db.VarChar(255)
  balance       String? @db.VarChar(255)

  @@id([address, token_address])
}

model users {
  address String  @id @db.VarChar(255)
  balance String? @db.VarChar(255)
}

model File {
  id   String @id @unique @default(cuid())
  blob Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  image     Image?
}

model Image {
  file   File   @relation(fields: [fileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fileId String @unique

  contentType String
  altText     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User?
}

model Role {
  id   String @id @unique @default(cuid())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  permissions Permission[]
}

model Permission {
  id   String @id @unique @default(cuid())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]
}

model User {
  id       String  @id @unique @default(cuid())
  email    String  @unique
  username String  @unique
  name     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image   Image?  @relation(fields: [imageId], references: [fileId])
  imageId String? @unique

  password Password?
  notes    Note[]
  roles    Role[]
  session  Session[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Session {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  expirationDate DateTime
}

model Note {
  id        String   @id @unique @default(cuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String

  // our user search orders by recently owners who have recently updated notes
  // so indexing on the owner ID helps with that (a LOT).
  @@index([ownerId, updatedAt(sort: Desc)])
}
